openapi: 3.1.0
info:
  title: API for Eventify
  summary: REST APIs for Eventify
  version: "1.0"
  description: REST APIs for managing events and users
servers:
  - url: http://localhost:9000
    description: Local development environment.
paths:
  /admin/login:
    post:
      operationId: admin-login
      summary: Admin Login
      description: API to authenticate an admin user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminLoginRequest"
      responses:
        200:
          description: Events list retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Admin credentials not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /user:
    get:
      operationId: get-current-user
      description: Retrieve the current authenticated user
      responses:
        200:
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      operationId: patch-user
      description: updates the current authenticated user partially
      responses:
        200:
          description: Successfully updated user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          description: Authentication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: delete-user
      description: Delete an authenticated user
      responses:
        200:
          description: Successfully deleted user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          description: Authentication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{id}:  
    get:
      operationId: get-specific-user
      description: Retrieves a specific user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
          200:
            description: Successfully retrieved specific user
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/User"
          401:
            description: Authentication Error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          500:
            description: Server Error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
    patch:
      operationId: patch-specific-user
      description: updates a specific user
      parameters:
        - name: firstName
          in: query
          required: false
          schema:
            type: string
        - name: lastName
          in: query
          required: false
          schema:
            type: string
        - name: email
          in: query
          required: false
          schema:
            type: string
      responses:
        200:
          description: Successfully updated specific user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          description: Authentication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: delete-specific-user
      description: deletes a specific user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: firstName
          in: query
          required: false
          schema:
            type: string
        - name: lastName
          in: query
          required: false
          schema:
            type: string
        - name: email
          in: query
          required: false
          schema:
            type: string
      responses:
        200:
          description: Successfully deleted specific user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          description: Authentication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /admin/users/{userId}:
    patch:
      operationId: update-user-admin
      summary: Update User Information
      description: API to update details for a specific user.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: User updated successfully
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: delete-user-admin
      summary: Delete User
      description: API to delete a specific user.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: User deleted successfully
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/signup:
    post:
      operationId: user-signup
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserSignupRequest"
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Bad request

  /users/login:
    post:
      operationId: user-login
      description: Authenticate and create a session for the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLoginRequest"
      responses:
        200:
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        401:
          description: Authentication failed

  /admin/events/{eventId}:
    patch:
      operationId: update-event
      summary: Update Event Information
      description: Update details for a specific event.
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Event updated successfully
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Event not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: delete-event-admin
      summary: Delete Event
      description: Delete a specific event.
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Event deleted successfully
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Event not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{id}/tickets:
    get:
      operationId: get-user-tickets
      description: Retrieve a user's tickets for upcoming and past events
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
          200:
            description: Successfully retrieved specific user
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/User"
          401:
            description: Authentication Error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          500:
            description: Server Error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
    delete:
      operationId: delete-event-user
      summary: Delete Event
      description: Delete a specific event.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Tickets retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Ticket"
        401:
          description: Authentication error

  /report-an-event:
    post:
      operationId: report-an-event
      description: Report an event by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportAnEventRequest"
      responses:
        200:
          description: Event reported successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        401:
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /events/{eventId}/register:
    post:
      operationId: register-for-event
      description: Register a user for an event
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterForEventRequest"
      responses:
        200:
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        401:
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /events/{eventId}/unregister-for-event:
    delete:
      operationId: unregister-for-event
      description: Unregister a user from an event
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Unregistration successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        401:
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /admin/user-reported-events:
    get:
      operationId: get-user-reported-events
      description: Retrieve all events that are reported by users
      responses:
        200:
          description: Events retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReportedTicketsResponse"
        401:
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /admin/events:
    get:
      operationId: get-all-events
      description: Retrieve all events
      responses:
        200:
          description: Events retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MultipleEventsResponse"
        401:
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /admin/users:
    get:
      operationId: get-all-users
      description: Retrieve all users
      responses:
        200:
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MultipleUsersResponse"
        401:
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/events:
    post:
      operationId: post-events
      description: Creates an event
      responses:
        200:
          description: Successfully created events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
        401:
          description: Authentication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      operationId: patch-events
      description: updates an event partially
      responses:
        200:
          description: Successfully updated event
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
        401:
          description: Authentication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /events/{id}:
    patch:
      operationId: patch-specific-event
      description: updates a specific event partially
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successfully updated specific user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
        401:
          description: Authentication Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error" 
components:
  schemas:
    User:
      type: object
      required: [id, firstName, lastName, email]
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
          minLength: 1
        lastName:
          type: string
          minLength: 1
        email:
          type: string
          format: email

    Ticket:
      type: object
      properties:
        id:
          type: string
        event:
          $ref: "#/components/schemas/Event"
        purchaseDate:
          type: string
          format: date-time

    Event:
      type: object
      required: [id, name, date, location]
      properties:
        id:
          type: string
          name:
            type: string
            minLength: 1
            maxLength: 100
        description:
          type: string
          maxLength: 1000
        date:
          type: string
          format: date-time
        location:
          type: string
          minLength: 1
        organizer:
          $ref: "#/components/schemas/User"

    UserSignupRequest:
      type: object
      required: [firstName, lastName, email, password]
      properties:
        firstName:
          type: string
          minLength: 1
        lastName:
          type: string
          minLength: 1
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
          pattern: ^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}$

    UserLoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8

    AdminLoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string

    AuthResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: "#/components/schemas/User"

    ReportAnEventRequest:
      type: object
      required: [id]
      properties:
        id:
          type: string
          format: uuid

    RegisterForEventRequest:
      type: object
      required: [userId, eventId]
      properties:
        userId:
          type: string
        eventId:
          type: string

    ReportedTicketsResponse:
      type: object
      properties:
        reportedBy:
          $ref: "#/components/schemas/User"
        ticket:
          $ref: "#/components/schemas/Ticket"

    MultipleEventsResponse:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: "#/components/schemas/Event"

    MultipleUsersResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/User"

    GenericResponse:
      type: object
      properties:
        message:
          type: string

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
